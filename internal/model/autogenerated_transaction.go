// Code generated by go-queryset. DO NOT EDIT.
package model

import (
	"errors"
	"fmt"
	"strings"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set TransactionQuerySet

// TransactionQuerySet is an queryset type for Transaction
type TransactionQuerySet struct {
	db *gorm.DB
}

// NewTransactionQuerySet constructs new TransactionQuerySet
func NewTransactionQuerySet(db *gorm.DB) TransactionQuerySet {
	return TransactionQuerySet{
		db: db.Model(&Transaction{}),
	}
}

func (qs TransactionQuerySet) w(db *gorm.DB) TransactionQuerySet {
	return NewTransactionQuerySet(db)
}

func (qs TransactionQuerySet) Select(fields ...TransactionDBSchemaField) TransactionQuerySet {
	names := []string{}
	for _, f := range fields {
		names = append(names, f.String())
	}

	return qs.w(qs.db.Select(strings.Join(names, ",")))
}

// Create is an autogenerated method
// nolint: dupl
func (o *Transaction) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *Transaction) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// All is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) All(ret *[]Transaction) error {
	return qs.db.Find(ret).Error
}

// AmountEq is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) AmountEq(amount int64) TransactionQuerySet {
	return qs.w(qs.db.Where("amount = ?", amount))
}

// AmountGt is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) AmountGt(amount int64) TransactionQuerySet {
	return qs.w(qs.db.Where("amount > ?", amount))
}

// AmountGte is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) AmountGte(amount int64) TransactionQuerySet {
	return qs.w(qs.db.Where("amount >= ?", amount))
}

// AmountIn is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) AmountIn(amount ...int64) TransactionQuerySet {
	if len(amount) == 0 {
		qs.db.AddError(errors.New("must at least pass one amount in AmountIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("amount IN (?)", amount))
}

// AmountLt is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) AmountLt(amount int64) TransactionQuerySet {
	return qs.w(qs.db.Where("amount < ?", amount))
}

// AmountLte is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) AmountLte(amount int64) TransactionQuerySet {
	return qs.w(qs.db.Where("amount <= ?", amount))
}

// AmountNe is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) AmountNe(amount int64) TransactionQuerySet {
	return qs.w(qs.db.Where("amount != ?", amount))
}

// AmountNotIn is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) AmountNotIn(amount ...int64) TransactionQuerySet {
	if len(amount) == 0 {
		qs.db.AddError(errors.New("must at least pass one amount in AmountNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("amount NOT IN (?)", amount))
}

// Count is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// Delete is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) Delete() error {
	return qs.db.Delete(Transaction{}).Error
}

// DeleteNum is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) DeleteNum() (int64, error) {
	db := qs.db.Delete(Transaction{})
	return db.RowsAffected, db.Error
}

// DeleteNumUnscoped is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) DeleteNumUnscoped() (int64, error) {
	db := qs.db.Unscoped().Delete(Transaction{})
	return db.RowsAffected, db.Error
}

// FromEq is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) FromEq(from int64) TransactionQuerySet {
	return qs.w(qs.db.Where("from_user = ?", from))
}

// FromGt is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) FromGt(from int64) TransactionQuerySet {
	return qs.w(qs.db.Where("from_user > ?", from))
}

// FromGte is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) FromGte(from int64) TransactionQuerySet {
	return qs.w(qs.db.Where("from_user >= ?", from))
}

// FromIn is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) FromIn(from ...int64) TransactionQuerySet {
	if len(from) == 0 {
		qs.db.AddError(errors.New("must at least pass one from in FromIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("from_user IN (?)", from))
}

// FromLt is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) FromLt(from int64) TransactionQuerySet {
	return qs.w(qs.db.Where("from_user < ?", from))
}

// FromLte is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) FromLte(from int64) TransactionQuerySet {
	return qs.w(qs.db.Where("from_user <= ?", from))
}

// FromNe is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) FromNe(from int64) TransactionQuerySet {
	return qs.w(qs.db.Where("from_user != ?", from))
}

// FromNotIn is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) FromNotIn(from ...int64) TransactionQuerySet {
	if len(from) == 0 {
		qs.db.AddError(errors.New("must at least pass one from in FromNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("from_user NOT IN (?)", from))
}

// GetDB is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) GetDB() *gorm.DB {
	return qs.db
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) GetUpdater() TransactionUpdater {
	return NewTransactionUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) IDEq(ID uint) TransactionQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) IDGt(ID uint) TransactionQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) IDGte(ID uint) TransactionQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) IDIn(ID ...uint) TransactionQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id IN (?)", ID))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) IDLt(ID uint) TransactionQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) IDLte(ID uint) TransactionQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) IDNe(ID uint) TransactionQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) IDNotIn(ID ...uint) TransactionQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", ID))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) Limit(limit int) TransactionQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// Offset is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) Offset(offset int) TransactionQuerySet {
	return qs.w(qs.db.Offset(offset))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs TransactionQuerySet) One(ret *Transaction) error {
	return qs.db.First(ret).Error
}

// OrderAscByAmount is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) OrderAscByAmount() TransactionQuerySet {
	return qs.w(qs.db.Order("amount ASC"))
}

// OrderAscByFrom is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) OrderAscByFrom() TransactionQuerySet {
	return qs.w(qs.db.Order("from_user ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) OrderAscByID() TransactionQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByTo is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) OrderAscByTo() TransactionQuerySet {
	return qs.w(qs.db.Order("to_user ASC"))
}

// OrderDescByAmount is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) OrderDescByAmount() TransactionQuerySet {
	return qs.w(qs.db.Order("amount DESC"))
}

// OrderDescByFrom is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) OrderDescByFrom() TransactionQuerySet {
	return qs.w(qs.db.Order("from_user DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) OrderDescByID() TransactionQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByTo is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) OrderDescByTo() TransactionQuerySet {
	return qs.w(qs.db.Order("to_user DESC"))
}

// ToEq is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) ToEq(to int64) TransactionQuerySet {
	return qs.w(qs.db.Where("to_user = ?", to))
}

// ToGt is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) ToGt(to int64) TransactionQuerySet {
	return qs.w(qs.db.Where("to_user > ?", to))
}

// ToGte is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) ToGte(to int64) TransactionQuerySet {
	return qs.w(qs.db.Where("to_user >= ?", to))
}

// ToIn is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) ToIn(to ...int64) TransactionQuerySet {
	if len(to) == 0 {
		qs.db.AddError(errors.New("must at least pass one to in ToIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("to_user IN (?)", to))
}

// ToLt is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) ToLt(to int64) TransactionQuerySet {
	return qs.w(qs.db.Where("to_user < ?", to))
}

// ToLte is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) ToLte(to int64) TransactionQuerySet {
	return qs.w(qs.db.Where("to_user <= ?", to))
}

// ToNe is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) ToNe(to int64) TransactionQuerySet {
	return qs.w(qs.db.Where("to_user != ?", to))
}

// ToNotIn is an autogenerated method
// nolint: dupl
func (qs TransactionQuerySet) ToNotIn(to ...int64) TransactionQuerySet {
	if len(to) == 0 {
		qs.db.AddError(errors.New("must at least pass one to in ToNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("to_user NOT IN (?)", to))
}

// SetAmount is an autogenerated method
// nolint: dupl
func (u TransactionUpdater) SetAmount(amount int64) TransactionUpdater {
	u.fields[string(TransactionDBSchema.Amount)] = amount
	return u
}

// SetFrom is an autogenerated method
// nolint: dupl
func (u TransactionUpdater) SetFrom(from int64) TransactionUpdater {
	u.fields[string(TransactionDBSchema.From)] = from
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u TransactionUpdater) SetID(ID uint) TransactionUpdater {
	u.fields[string(TransactionDBSchema.ID)] = ID
	return u
}

// SetTo is an autogenerated method
// nolint: dupl
func (u TransactionUpdater) SetTo(to int64) TransactionUpdater {
	u.fields[string(TransactionDBSchema.To)] = to
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u TransactionUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u TransactionUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// ===== END of query set TransactionQuerySet

// ===== BEGIN of Transaction modifiers

// TransactionDBSchemaField describes database schema field. It requires for method 'Update'
type TransactionDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f TransactionDBSchemaField) String() string {
	return string(f)
}

// TransactionDBSchema stores db field names of Transaction
var TransactionDBSchema = struct {
	ID     TransactionDBSchemaField
	From   TransactionDBSchemaField
	To     TransactionDBSchemaField
	Amount TransactionDBSchemaField
}{

	ID:     TransactionDBSchemaField("id"),
	From:   TransactionDBSchemaField("from_user"),
	To:     TransactionDBSchemaField("to_user"),
	Amount: TransactionDBSchemaField("amount"),
}

// Update updates Transaction fields by primary key
// nolint: dupl
func (o *Transaction) Update(db *gorm.DB, fields ...TransactionDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":        o.ID,
		"from_user": o.From,
		"to_user":   o.To,
		"amount":    o.Amount,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update Transaction %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// TransactionUpdater is an Transaction updates manager
type TransactionUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewTransactionUpdater creates new Transaction updater
// nolint: dupl
func NewTransactionUpdater(db *gorm.DB) TransactionUpdater {
	return TransactionUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&Transaction{}),
	}
}

// ===== END of Transaction modifiers

// ===== END of all query sets
