apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:15-alpine
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_USER
              value: demo_user
            - name: POSTGRES_PASSWORD
              value: demo_pass
            - name: POSTGRES_DB
              value: demo_db
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgres-storage
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: postgres-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
spec:
  ports:
    - port: 5432
  selector:
    app: postgres
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-sql
data:
  init.sql: |
    -- ========================
    --  Users table
    -- ========================
    CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        name TEXT NOT NULL,
        balance BIGINT NOT NULL DEFAULT 0,
        password TEXT NOT NULL
    );

    -- ========================
    --  Transactions table
    -- ========================
    CREATE TABLE IF NOT EXISTS transactions (
        id SERIAL PRIMARY KEY,
        from_user BIGINT NOT NULL,
        to_user   BIGINT NOT NULL,
        amount BIGINT NOT NULL,
        created_at TIMESTAMP DEFAULT NOW(),
        CONSTRAINT fk_from_user FOREIGN KEY (from_user) REFERENCES users(id) ON DELETE CASCADE,
        CONSTRAINT fk_to_user FOREIGN KEY (to_user) REFERENCES users(id) ON DELETE CASCADE
    );

    -- ========================
    --  Seed data
    -- ========================
    INSERT INTO users (id, name, balance, password) VALUES
        (1, 'alice', 10000, 'password123'),
        (2, 'bob', 5000, 'password456'),
        (3, 'bb', 5000, 'password')
    ON CONFLICT (id) DO NOTHING;

    INSERT INTO transactions (from_user, to_user, amount) VALUES
        (1, 2, 2000),
        (2, 3, 1000)
    ON CONFLICT DO NOTHING;
--- 
apiVersion: batch/v1
kind: Job
metadata:
  name: postgres-init
spec:
  template:
    spec:
      restartPolicy: OnFailure
      containers:
        - name: init-db
          image: postgres:15-alpine
          env:
            - name: PGPASSWORD
              value: demo_pass
          volumeMounts:
            - name: init-sql
              mountPath: /docker-entrypoint-initdb.d
          command:
            - sh
            - -c
            - |
              echo "Waiting for Postgres..."
              sleep 10
              psql -h postgres -U demo_user -d demo_db -f /docker-entrypoint-initdb.d/init.sql
      volumes:
        - name: init-sql
          configMap:
            name: postgres-init-sql
